Deployment ELF

OK - Compile runtime.asm to ELF -> small ELF binary 
- Write deploy routine in Rust, use include_bytes to add the other binary
https://chatgpt.com/share/57ab10e0-8454-4d61-9cab-ca6a13836d3d
- Compile deploy.asm
OK - Find out how memory.x works
https://github.com/rust-embedded/riscv/blob/master/riscv-rt/src/lib.rs#L41
- Create our runtime that uses riscv-rt and adds alloc [maybe] and host functions
- Remember to strip
- Constructor in deploy
- Function dispatcher in runtime

Language library

- Proc macros for Contract trait, public functions, constructor
- Generates impl Contract with `deploy` and `call`
- Types: mapping etc
- ABI encoding/decoding
- ...

Interpreter

- `interpreter` crate, EVM stuff
- `revm::context.rs` has everything we need from the host
- new crate `evm_riscv_interpreter` that copies `interpreter`
  and only forwards calls to `evm_interpreter`
- new crate `riscv_interpreter` that does the same as `evm_interpreter` but for RISCV
- make `evm_riscv_interpreter` compose the two above
- composer needs to find out if EVM or RISCV
